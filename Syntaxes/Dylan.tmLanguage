<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>dylan</string>
	</array>
	<key>keyEquivalent</key>
	<string>^~D</string>
	<key>name</key>
	<string>Dylan</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>(?&lt;=^|\s|\()/\*</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block.dylan</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment-block</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(^[ \t]+)?(?=//)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.whitespace.comment.leading.dylan</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?!\G)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>//</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.dylan</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\n</string>
					<key>name</key>
					<string>comment.line.double-slash.dylan</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(module|synopsis|author|copyright|version|files|executable|library):</string>
			<key>contentName</key>
			<string>meta.preprocessor.dylan</string>
			<key>end</key>
			<string>^\s*$</string>
			<key>name</key>
			<string>keyword.control.preprocessor.dylan</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>^(module|synopsis|author|copyright|version|files|executable|library):</string>
					<key>name</key>
					<string>keyword.control.preprocessor.dylan</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dylan</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.dylan</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.dylan</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.dylan</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.dylan</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^(define)\s+((?:(?:sealed|open|inline[-a-z]*)\s+)+)?(?:(domain)|(method|function|generic)\s+)([\\_A-Za-z0-9/!?*%$\-\&lt;\&gt;=]*)</string>
			<key>name</key>
			<string>meta.function.dylan</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dylan</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.dylan</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.class.dylan</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.dylan</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^(define)\s+((?:(?:sealed|open|abstract|concrete|primary|free)\s+)+)?(class)\s+([_A-Za-z0-9/!?*%$\-\&lt;\&gt;]*)</string>
			<key>name</key>
			<string>meta.class.dylan</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dylan</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.other.dylan</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.namespace.dylan</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^(define)\s+((library|module)\s+[_A-Za-z0-9/!?*%$\-\&lt;\&gt;]+)</string>
			<key>name</key>
			<string>meta.namespace.dylan</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dylan</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.dylan</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.other.dylan</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^(define)\s+(constant|variable)\s+([_A-Za-z0-9/!?*%$\-\&lt;\&gt;]+)</string>
			<key>name</key>
			<string>meta.variable.dylan</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dylan</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.dylan</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.other.dylan</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^(define)\s+(macro)\s+([_A-Za-z0-9/!?*%$\-\&lt;\&gt;]+)</string>
			<key>name</key>
			<string>meta.macro.dylan</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dylan</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.other.dylan</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^(define)\s+([_A-Za-z0-9/!?*%$\-\&lt;\&gt;\s]+)</string>
			<key>name</key>
			<string>meta.definition.dylan</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(#t|#f|#next|#rest|#key|#all-keys|#include)</string>
			<key>name</key>
			<string>constant.language.dylan</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b((#x[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)\b</string>
			<key>name</key>
			<string>constant.numeric.dylan</string>
		</dict>
		<dict>
			<key>match</key>
			<string>'(\\&lt;[0-9a-fA-F]*&gt;|\\.|.)'</string>
			<key>name</key>
			<string>constant.character.dylan</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>end</key>
			<string>"</string>
			<key>name</key>
			<string>string.quoted.double.dylan</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#escape</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(#)"</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.dylan</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>name</key>
			<string>string.quoted.other.dylan</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#escape</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;=^|[,.()\s])(above|afterwards|begin|below|block|by|case|cleanup|else|elseif|exception|finally|for|from|keyed-by|if|in|otherwise|select|then|to|unless|until:?|using|when|while:?)(?=$|[;,()\s])</string>
			<key>name</key>
			<string>keyword.control.dylan</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;=^|[,;\s])end(?=$|[;,)\s])</string>
			<key>name</key>
			<string>keyword.control.dylan</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;=^|[,.(\s])(class|constant|create|default:|define|each-subclass|exclude:|export|export:|function|generic|import:|inherited|init-function:|init-keyword:|init-value:|instance|keyword|let(\s+handler)?|library|local|macro|method|module|prefix:|rename:|required|required-init-keyword:|sealed|setter:|slot|type:|use|variable|virtual)(?=$|[;,.()\s])</string>
			<key>name</key>
			<string>keyword.other.dylan</string>
		</dict>
		<dict>
			<key>match</key>
			<string>&lt;(abort|array|boolean|byte-string|character|class|collection|complex|condition|deque|double-float|empty-list|error|explicit-key-collection|extended-float|float|function|generic-function|integer|list|method|mutable-collection|mutable-explicit-key-collection|mutable-sequence|number|object-table|object|pair|range|rational|real|restart|sealed-object-error|sequence|serious-condition|simple-error|simple-object-vector|simple-restart|simple-vector|simple-warning|single-float|singleton|stretchy-collection|stretchy-vector|string|symbol|table|type-error|type|unicode-string|vector|warning)&gt;</string>
			<key>name</key>
			<string>support.class.dylan</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;=^|[~,.(\[\s])(abort|abs|add|add!|add-method|add-new|add-new!|all-superclasses|always|any\?|applicable-method\?|apply|aref|aref-setter|as|as-lowercase|as-lowercase!|as-uppercase|as-uppercase!|ash|backward-iteration-protocol|break|ceiling|ceiling/|cerror|check-type|choose|choose-by|complement|compose|concatenate|concatenate-as|condition-format-arguments|condition-format-string|conjoin|copy-sequence|curry|default-handler|dimension|dimensions|direct-subclasses|direct-superclasses|disjoin|do|do-handlers|element|element-setter|empty\?|error|even\?|every\?|false-or|fill!|find-key|find-method|first|first-setter|floor|floor/|forward-iteration-protocol|function-arguments|function-return-values|function-specializers|gcd|generic-function-mandatory-keywords|generic-function-methods|head|head-setter|identity|initialize|instance\?|integral\?|intersection|key-sequence|key-test|last|last-setter|lcm|limited|list|logand|logbit\?|logior|lognot|logxor|make|map|map-as|map-into|max|member\?|merge-hash-codes|min|modulo|negative|negative\?|next-method|object-class|object-hash|odd\?|one-of|pair|pop|pop-last|positive\?|push|push-last|range|rank|rcurry|reduce|reduce1|remainder|remove|remove!|remove-duplicates|remove-duplicates!|remove-key!|remove-method|replace-elements!|replace-subsequence!|restart-query|return-allowed\?|return-description|return-query|reverse|reverse!|round|round/|row-major-index|second|second-setter|shallow-copy|signal|singleton|size|size-setter|slot-initialized\?|sort|sort!|sorted-applicable-methods|subsequence-position|subtype\?|table-protocol|tail|tail-setter|third|third-setter|truncate|truncate/|type-error-expected-type|type-error-value|type-for-copy|type-union|union|values|vector|zero\?)(?=$|[;,.()\s\]])</string>
			<key>name</key>
			<string>support.function.dylan</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>comment-block</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=^|\s|\()/\*</string>
			<key>end</key>
			<string>\*/</string>
		</dict>
		<key>escape</key>
		<dict>
			<key>match</key>
			<string>\\(&lt;[0-9a-fA-F]*&gt;|.)</string>
			<key>name</key>
			<string>constant.character.escape.dylan</string>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.dylan</string>
	<key>uuid</key>
	<string>475B8369-3520-4B4C-BBA1-1D1229C6F397</string>
</dict>
</plist>
